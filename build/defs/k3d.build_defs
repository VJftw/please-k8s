"""
Build rules for working with local [K3D](https://k3d.io) clusters.
"""
subinclude("///shell//build_defs:shell")

def k3d_cluster(
    name: str,
    config: str,
):
    k3d_tool = CONFIG.K8S.K3D_TOOL
    yq_tool = CONFIG.K8S.K3D_YQ_TOOL
    k3d_helper_tool = CONFIG.K8S.K3D_HELPER_TOOL

    if not config.startswith("//"):
        config=export_file(
            name = f"_{name}#config",
            src = config,
        )

    sh_cmd(
        name = f"{name}_setup",
        shell = "/usr/bin/env bash",
        data = [k3d_helper_tool, yq_tool, k3d_tool, config],
        cmd = f"""
set -Eeuo pipefail
export K3D="$(out_location {k3d_tool})"
export YQ="$(out_location {yq_tool})"
export K3D_CONFIG="$(out_location {config})"

"$(out_location {k3d_helper_tool})" setup
        """,
    )

    sh_cmd(
        name = f"{name}_teardown",
        shell = "/usr/bin/env bash",
        data = [k3d_helper_tool, yq_tool, k3d_tool, config],
        cmd = f"""
set -Eeuo pipefail
export K3D="$(out_location {k3d_tool})"
export YQ="$(out_location {yq_tool})"
export K3D_CONFIG="$(out_location {config})"

"$(out_location {k3d_helper_tool})" teardown
        """,
    )

    sh_cmd(
        name = tag(name, "helm_post_renderer"),
        data = [k3d_helper_tool, yq_tool, k3d_tool, config],
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eeuo pipefail
export K3D="$(out_location {k3d_tool})"
export YQ="$(out_location {yq_tool})"
export K3D_CONFIG="$(out_location {config})"

"$(out_location {k3d_helper_tool})" helm_post_render \\\$@
        """,
        visibility = ["PUBLIC"]
    )

    sh_cmd(
        name = tag(name, "image_pusher"),
        shell = "/usr/bin/env bash",
        data = [k3d_helper_tool, yq_tool, k3d_tool, config],
        cmd = f"""
set -Eeuo pipefail
export K3D="$(out_location {k3d_tool})"
export YQ="$(out_location {yq_tool})"
export K3D_CONFIG="$(out_location {config})"

"$(out_location {k3d_helper_tool})" load_images \\\$@
        """,
        visibility = ["PUBLIC"]
    )

    sh_cmd(
        name = tag(name, "kube_context"),
        data = [k3d_tool],
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eeuo pipefail
$(out_exe {k3d_tool}) kubeconfig merge --kubeconfig-merge-default {name} > /dev/null
echo "k3d-{name}"
        """,
        visibility = ["PUBLIC"],
    )
