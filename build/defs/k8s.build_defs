"""
Build rules for working with Kubernetes configuration and
[Kustomize](https://kustomize.io).
"""

def k8s_config(
    name: str,
    srcs: list = [],
    images: list = [],
    create_only: bool = False,
    visibility: list = [],
    labels: list = [],
):
    """
    Build rule for collecting plain Kubernetes YAML configuration.

    This build concatenates the given srcs Kubernetes configuration into a
    single file in the order given by the srcs.

    Args:
        name: The name of the build rule.
        srcs: The Kubernetes configuration YAMLs to collect into a single file.
        images: The Please 'image' targets that the Kubernetes configuration
                uses. These should have a `_push` subrule that can be used to
                push them before the Kubernetes configuration is applied. The
                `_push` subrule must satisfy the same functionality as provided
                by the `VJftw/please-buildkit` build definitions. A more formal
                API will be defined in a future version of this plugin.
        create_only: Adds a 'kubectl_create' label instead of a 'kubectl_apply'
                     label to indicate that the resources should be added using
                     `kubectl create -f ...`. This is useful for resources that
                     use generateName for idempotency.
        labels: Additional Please labels.
    """
    images = [canonicalise(img) for img in images]

    if create_only:
        labels += ["kubectl_create"]
    else:
        labels += ["kubectl_apply"]

    image_labels=[f"image:{img}" for img in images]

    post_build_functions = [_add_image_labels]

    # concat all yamls into one
    return genrule(
        name = name,
        srcs = srcs,
        outs = [f"{name}.yaml"],
        post_build = lambda rule, _cmd: [fn(rule, srcs) for fn in post_build_functions],
        cmd = """
        mapfile -t src_yamls < <(find . -name '*.yaml')
        for src in "${src_yamls[@]}"; do
            first_non_comment_line="$(grep -Em1 "^[^#].*$")"
            if [ "$first_non_comment_line" != "---" ]; then
                echo "---" >> $OUTS
            fi
            cat "$src" >> $OUTS
        done
        """,
        visibility = visibility,
        labels = labels + ["k8s_config"] + image_labels,
    )


def _add_image_labels(rule_name, srcs: list):
    rule_name=canonicalise(":"+rule_name)

    for src in srcs:
        if src.startswith("//") or src.startswith(":"):
            src=canonicalise(src)
            img_labels = get_labels(src, "image:", False)
            for l in img_labels:
                add_label(rule_name, "image:"+l)

def kustomized_config(
    name: str,
    srcs: list = [],
    images: list = [],
    deps: list = [],
    create_only: bool = False,
    visibility: list = [],
    labels: list = [],
):
    """Build rule for building Kustomize projects.

    Args:
        name: The name of the build rule.
        srcs: The source kustomize resources including the kustomization.yaml
        images: The Please 'image' targets that this Kustomization uses. These
                should have a `_push` subrule that can be used to push them
                before the Kustomization is applied. The `_push` subrule
                must satisfy the same functionality as provided by the
                `VJftw/please-buildkit` build definitions. A more formal API
                will be defined in a future version of this plugin.
        deps: Please targets that this Kustomization depends on at build time.
              For example, other Kustomizations can be referenced to use them as
              bases etc.
        visibility: The targets to make the kustomized configuration visible to.
    """
    kustomize_tool = CONFIG.K8S.KUSTOMIZE_TOOL

    images = [canonicalise(img) for img in images]
    image_labels=[f"image:{img}" for img in images]

    post_build_functions = [_add_image_labels]

    deps = [canonicalise(d) for d in deps]
    kustomized_rule=genrule(
        name = f"{name}_kustomized",
        srcs = srcs,
        post_build = lambda rule, _cmd: [fn(rule, srcs+[f"{d}_srcs" for d in deps]) for fn in post_build_functions],
        outs = [f"{name}_kustomized.yaml"],
        cmd = f"""
set -Eeuo pipefail
kustomization_file="$PKG/kustomization.yaml"
if [ ! -f "${kustomization_file}" ]; then
    echo "missing kustomization file in $PKG"
    exit 1
fi
$TOOLS build $PKG > $HOME/$OUTS
        """,
        tools = [kustomize_tool],
        deps = [f"{d}_srcs" for d in deps] + deps,
        visibility = visibility,
        labels = image_labels,
    )

    genrule(
        name = f"{name}_srcs",
        post_build = lambda rule, _cmd: [fn(rule, srcs+deps) for fn in post_build_functions],
        output_dirs = ["out"],
        srcs = srcs,
        cmd = "mkdir out && for src in $SRCS; do mv $src out/; done",
        visibility = visibility,
        deps = deps,
        labels = image_labels,
    )

    return k8s_config(
        name = name,
        srcs = [kustomized_rule],
        visibility = visibility,
        images = images,
        labels = ["kustomized_config"] + labels,
        create_only = create_only,
    )
